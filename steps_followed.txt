1. First I created a new component. 

Learning - 

That component (Actor) can be easily added to the objects like cubes, circle etc 

To delete a component, you need to first see, no object should be using it. 
Now, go to the project file, and delete .h and .cpp of the component. come outside a bit, and delete all the binaries of the file.



2. I trued logging in debugging window -

Learning -

Window -> Developer Tools -> output log 

UE_LOG(Category, Verbosity, TEXT("Message"));
ex - 
1) UE_LOG(LogTemp, Warning, TEXT("Hello!"));

2) 	FString Log = TEXT("Hello!");

	UE_LOG(LogTemp, Warning, TEXT("%s"), *Log); // here * is used for overloading not dereferencing.


error -> red
Warning -> yellow
display -> grey

3. Set a level as default one.

Learning - 

First save the level.

Go to edit -> project settings -> maps and modes -> Editor startup map




4. Use GetOwner() -> to find the components owner, Use GetName() to get the name


Learning -

use -> to access members of a pointer. . operator is used when you dereference it.
A pointer always has memory address as value.

#include "GameFramework/Actor.h" -> we need to include what we use, ie to use GetName() , GetOwner(), you need to include this.



5) Get the Location of a component. and Use FVector

example - 
FString ObjectPosition = GetOwner()->GetActorLocation().ToString();



6) Mesh, Material and Texture


Learnings - 

-> if 2 mesh objects (like door and door frame) are compatible, then select both and then drag them to add into the game.

You can create a node -> texture sample for a material, that will take a texture and make it as base color for that material.

If we directly apply a texture on our mesh object, texture will get applied, and a separate material with that texture will also get born. that we can see beside the other materials already present.
This is exactly what we did manually earlier.

-> Always make an instance of a material and then apply on an object (mesh), rather than directly applying on it. (material is also a shader)
Because, changing the base material will lead to changes in all the objects using that material, hence always use instance.




7) Using BSPs to create objects (static mesh)

First add the BSP Geometry -> go to brush settings -> create static mesh. 
(But keep in mind that these are not performance efficient, So dont use it).

Selecting material first, and then adding a BSP, directly applies the material all over the BSP While we add them into our game.
If you choose subract (subtractive brush), You make a room out of the object you place that subtractive object.

Subtracting do not work on static mesh. It only works BSP (Brush)

-> Z fighting -> it happens when 2 objects are in same place and overlapping.

-> order should follow like this -> first additive, and then subtractive, otherwise it wont work. You can change the order manually through options also.

-> Alt + Drag to make a copy.

Quad view-> best for almost everything.


8) Chaning the UVs.

UVs -> make a node connected to UVs "TextCoordinates" -> change Utiling and Vtiling options.

Now, that will make changes wherever that material was used. Now, We use ScalarParameter to make changes and use multiply node to connect everything.

In Short -> Adding nodes in material will give you options in their material instances.



9) Now, We created and added an new component to the door for opening functionality.

But, We need to make the static mesh movable, which is statc by default. (by clicking on that option)

Learning -> x: Roll, y:pitch, z:yaw


10) Collision. -> we wanted to go out of the door. How to get rid of collision ?

Never use complex colision -> too expensive, Also Doesnt have proper collision setup. 

Low Polygon collision can be created the model in the first place. 
But you can use BSPs also. -> first cover up the model with it. -> create a static mesh out of it. -> change its collision to -> "Use Complex collision as simple". (Not ideal but still)


11) You can replace meshes -> by selecting the thing that needs to be replaced, and select the mesh you want to insert in the "static mesh" option.

To Delete the old object/mesh, just delete and replace the one currently using via options while deleting. never use force delete.


-> Always fix redirector after deleting something. (content-> right click on desired folder, ex - models-> fix redirectors)

.


12) UPROPERTY(EditAnywhere) -> makes that property available to be edit in the engine itself.
PressurePlate is to be set in the engine after compile for our door.
Also, the actorThatOpens is also set in Engine, You can do that by ejecting yourself. -> to defaultPawn.

13) You can use GetWorld() to obtain everything (Actors, objects) present in the game.
The Default Pawn is your "Body", in transient.
The Player Controller is your "mind" that persists.